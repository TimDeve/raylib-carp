(load-once "structs.carp")

(defmodule Raylib
  (register init-window-ptr (Fn [Int Int (Ptr CChar)] ()) "InitWindow")
  (defn init-window [width height window-name]
   (init-window-ptr width height (cstr window-name)))
  (register window-should-close (λ [] Bool) "WindowShouldClose")
  (register close-window (λ [] ()) "CloseWindow")
  (register is-window-ready (λ [] Bool) "IsWindowReady")
  (register is-window-fullscreen (λ [] Bool) "IsWindowFullscreen")
  (register is-window-hidden (λ [] Bool) "IsWindowHidden")
  (register is-window-minimized (λ [] Bool) "IsWindowMinimized")
  (register is-window-maximized (λ [] Bool) "IsWindowMaximized")
  (register is-window-focused (λ [] Bool) "IsWindowFocused")
  (register is-window-resized (λ [] Bool) "IsWindowResized")
  (register toggle-fullscreen (λ [] ()) "ToggleFullscreen")
  (register maximize-window (λ [] ()) "MaximizeWindow")
  (register minimize-window (λ [] ()) "MinimizeWindow")
  (register restore-window (λ [] ()) "RestoreWindow")
  (register set-window-icon (λ [Image] ()) "SetWindowIcon")
  (register set-window-title-ptr (λ [(Ptr CChar)] ()) "SetWindowTitle")
  (defn set-window-title [title]
    (set-window-title-ptr (cstr title)))
  (register set-window-position (λ [Int Int] ()) "SetWindowPosition")
  (register set-window-monitor (λ [Int] ()) "SetWindowMonitor")
  (register set-window-min-size (λ [Int Int] ()) "SetWindowMinSize")
  (register set-window-size (λ [Int Int] ()) "SetWindowSize")
  (register get-window-handle (λ [] (Ptr ())) "GetWindowHandle")
  (register get-screen-width (λ [] Int) "GetScreenWidth")
  (register get-screen-height (λ [] Int) "GetScreenHeight")
  (register get-monitor-count (λ [] Int) "GetMonitorCount")
  (register get-current-monitor (λ [] Int) "GetCurrentMonitor")
  (register get-monitor-position (λ [Int] Vector2) "GetMonitorPosition")
  (register get-monitor-width (λ [Int] Int) "GetMonitorWidth")
  (register get-monitor-height (λ [Int] Int) "GetMonitorHeight")
  (register get-monitor-physical-width (λ [Int] Int) "GetMonitorPhysicalWidth")
  (register get-monitor-physical-height (λ [Int] Int) "GetMonitorPhysicalHeight")
  (register get-monitor-refresh-rate (λ [Int] Int) "GetMonitorRefreshRate")
  (register get-window-position (λ [] Vector2) "GetWindowPosition")
  (register get-window-scale-d-p-i (λ [] Vector2) "GetWindowScaleDPI")
  (register set-clipboard-text-ptr (λ [(Ptr CChar)] ()) "SetClipboardText")
  (defn set-clipboard-text [text]
    (set-clipboard-text-ptr (cstr text)))
  (register swap-screen-buffer (λ [] ()) "SwapScreenBuffer")
  (register poll-input-events (λ [] ()) "PollInputEvents")
  (register wait-time (λ [Float] ()) "WaitTime")
  (register show-cursor (λ [] ()) "ShowCursor")
  (register hide-cursor (λ [] ()) "HideCursor")
  (register is-cursor-hidden (λ [] Bool) "IsCursorHidden")
  (register enable-cursor (λ [] ()) "EnableCursor")
  (register disable-cursor (λ [] ()) "DisableCursor")
  (register is-cursor-on-screen (λ [] Bool) "IsCursorOnScreen")
  (register clear-background (λ [Color] ()) "ClearBackground")
  (register begin-drawing (λ [] ()) "BeginDrawing")
  (register end-drawing (λ [] ()) "EndDrawing")
  (register begin-mode-2d (λ [Camera2D] ()) "BeginMode2D")
  (register end-mode-2d (λ [] ()) "EndMode2D")
  ; (register begin-mode-3d (λ [Camera3D] ()) "BeginMode3D")
  ; (register end-mode-3d (λ [] ()) "EndMode3D")
  ; (register begin-texture-mode (λ [RenderTexture2D] ()) "BeginTextureMode")
  ; (register end-texture-mode (λ [] ()) "EndTextureMode")
  ; (register begin-shader-mode (λ [Shader] ()) "BeginShaderMode")
  ; (register end-shader-mode (λ [] ()) "EndShaderMode")
  (register begin-blend-mode (λ [Int] ()) "BeginBlendMode")
  (register end-blend-mode (λ [] ()) "EndBlendMode")
  (register begin-scissor-mode (λ [Int Int Int Int] ()) "BeginScissorMode")
  (register end-scissor-mode (λ [] ()) "EndScissorMode")
  ; (register begin-vr-stereo-mode (λ [VrStereoConfig] ()) "BeginVrStereoMode")
  ; (register end-vr-stereo-mode (λ [] ()) "EndVrStereoMode")
  ; (register load-vr-stereo-config (λ [VrDeviceInfo] VrStereoConfig) "LoadVrStereoConfig")
  ; (register unload-vr-stereo-config (λ [VrStereoConfig] ()) "UnloadVrStereoConfig")
  ; (register load-shader (λ [(Ptr CChar) (Ptr CChar)] Shader) "LoadShader")
  ; (register load-shader-from-memory (λ [(Ptr CChar) (Ptr CChar)] Shader) "LoadShaderFromMemory")
  ; (register get-shader-location (λ [Shader (Ptr CChar)] Int) "GetShaderLocation")
  ; (register get-shader-location-attrib (λ [Shader (Ptr CChar)] Int) "GetShaderLocationAttrib")
  ; (register set-shader-value (λ [Shader Int (Ptr Unit) Int] ()) "SetShaderValue")
  ; (register set-shader-value-v (λ [Shader Int (Ptr Unit) Int Int] ()) "SetShaderValueV")
  ; (register set-shader-value-matrix (λ [Shader Int Matrix] ()) "SetShaderValueMatrix")
  ; (register set-shader-value-texture (λ [Shader Int Texture2D] ()) "SetShaderValueTexture")
  ; (register unload-shader (λ [Shader] ()) "UnloadShader")
  ; (register get-mouse-ray (λ [Vector2 Camera] Ray) "GetMouseRay")
  ; (register get-camera-matrix (λ [Camera] Matrix) "GetCameraMatrix")
  ; (register get-camera-matrix-2d (λ [Camera2D] Matrix) "GetCameraMatrix2D")
  ; (register get-world-to-screen (λ [Vector3 Camera] Vector2) "GetWorldToScreen")
  ; (register get-world-to-screen-ex (λ [Vector3 Camera Int Int] Vector2) "GetWorldToScreenEx")
  (register get-world-to-screen-2d (λ [Vector2 Camera2D] Vector2) "GetWorldToScreen2D")
  (register get-screen-to-world-2d (λ [Vector2 Camera2D] Vector2) "GetScreenToWorld2D")
  (register set-target-fps (λ [Int] ()) "SetTargetFPS")
  (register get-fps (λ [] Int) "GetFPS")
  (register get-frame-time (λ [] Float) "GetFrameTime")
  (register get-time (λ [] Double) "GetTime")
  (register get-random-value (λ [Int Int] Int) "GetRandomValue")
  (register take-screenshot-ptr (λ [(Ptr CChar)] ()) "TakeScreenshot")
  (defn take-screenshot [filename]
    (take-screenshot-ptr (cstr filename)))
  (register set-trace-log-level (λ [Int] ()) "SetTraceLogLevel")
  (register mem-alloc (λ [Int] (Ptr ())) "MemAlloc")
  (register mem-realloc (λ [(Ptr Unit) Int] (Ptr ())) "MemRealloc")
  (register mem-free (λ [(Ptr Unit)] ()) "MemFree")
  ; (register set-trace-log-callback (λ [TraceLogCallback] ()) "SetTraceLogCallback")
  ; (register set-load-file-data-callback (λ [LoadFileDataCallback] ()) "SetLoadFileDataCallback")
  ; (register set-save-file-data-callback (λ [SaveFileDataCallback] ()) "SetSaveFileDataCallback")
  ; (register set-load-file-text-callback (λ [LoadFileTextCallback] ()) "SetLoadFileTextCallback")
  ; (register set-save-file-text-callback (λ [SaveFileTextCallback] ()) "SetSaveFileTextCallback")
  (register load-file-text-ptr (λ [(Ptr CChar)] (Ptr CChar)) "LoadFileText")
  (defn load-file-text [filename]
    (String.from-cstr (load-file-text-ptr (cstr filename))))
  (register file-exists-ptr? (λ [(Ptr CChar)] Bool) "FileExists")
  (defn file-exists? [filename]
    (file-exists-ptr? (cstr filename)))
  (register directory-exists-ptr? (λ [(Ptr CChar)] Bool) "DirectoryExists")
  (defn directory-exists? [dirname]
    (directory-exists-ptr? (cstr dirname)))
  (register is-file-extension-ptr? (λ [(Ptr CChar) (Ptr CChar)] Bool) "IsFileExtension")
  (defn is-file-extension? [filename ext]
    (is-file-extension-ptr? (cstr filename) (cstr filename)))
  ; (register get-directory-files-ptr (λ [(Ptr CChar) (Ptr Int)] (Ptr (Ptr CChar))) "GetDirectoryFiles")
  ; (register clear-directory-files (λ [] ()) "ClearDirectoryFiles")
  (register change-directory-ptr (λ [(Ptr CChar)] Bool) "ChangeDirectory")
  (defn change-directory [dirpath]
    (change-directory-ptr (cstr dirpath)))
  ; (register is-file-dropped (λ [] Bool) "IsFileDropped")
  ; (register get-dropped-files (λ [(Ptr Int)] (Ptr (Ptr CChar))) "GetDroppedFiles")
  ; (register clear-dropped-files (λ [] ()) "ClearDroppedFiles")
  (register get-file-mod-time-ptr (λ [(Ptr CChar)] Long) "GetFileModTime")
  (defn get-file-mod-time [filepath]
    (get-file-mod-time-ptr (cstr filepath)))
  (register open-url-ptr (λ [(Ptr CChar)] ()) "OpenURL")
  (defn open-url [url]
    (open-url-ptr (cstr url)))
  (register is-key-pressed? (λ [RaylibKey] Bool) "IsKeyPressed")
  (register is-key-down? (λ [RaylibKey] Bool) "IsKeyDown")
  (register is-key-released? (λ [RaylibKey] Bool) "IsKeyReleased")
  (register is-key-up? (λ [RaylibKey] Bool) "IsKeyUp")
  (register set-exit-key (λ [RaylibKey] ()) "SetExitKey")
  (register get-key-pressed (λ [] RaylibKey) "GetKeyPressed")
  (register get-char-pressed (λ [] Int) "GetCCharPressed")
  (register is-gamepad-available? (λ [Int] Bool) "IsGamepadAvailable")
  (register is-gamepad-button-pressed? (λ [Int Int] Bool) "IsGamepadButtonPressed")
  (register is-gamepad-button-down? (λ [Int Int] Bool) "IsGamepadButtonDown")
  (register is-gamepad-button-released? (λ [Int Int] Bool) "IsGamepadButtonReleased")
  (register is-gamepad-button-up? (λ [Int Int] Bool) "IsGamepadButtonUp")
  (register get-gamepad-button-pressed (λ [] Int) "GetGamepadButtonPressed")
  (register get-gamepad-axis-count (λ [Int] Int) "GetGamepadAxisCount")
  (register get-gamepad-axis-movement (λ [Int Int] Float) "GetGamepadAxisMovement")
  (register set-gamepad-mappings (λ [(Ptr CChar)] Int) "SetGamepadMappings")
  (register is-mouse-button-pressed? (λ [Int] Bool) "IsMouseButtonPressed")
  (register is-mouse-button-down? (λ [Int] Bool) "IsMouseButtonDown")
  (register is-mouse-button-released? (λ [Int] Bool) "IsMouseButtonReleased")
  (register is-mouse-button-up? (λ [Int] Bool) "IsMouseButtonUp")
  (register get-mouse-x (λ [] Int) "GetMouseX")
  (register get-mouse-y (λ [] Int) "GetMouseY")
  (register get-mouse-position (λ [] Vector2) "GetMousePosition")
  (register get-mouse-delta (λ [] Vector2) "GetMouseDelta")
  (register set-mouse-position (λ [Int Int] ()) "SetMousePosition")
  (register set-mouse-offset (λ [Int Int] ()) "SetMouseOffset")
  (register set-mouse-scale (λ [Float Float] ()) "SetMouseScale")
  (register get-mouse-wheel-move (λ [] Float) "GetMouseWheelMove")
  (register set-mouse-cursor (λ [Int] ()) "SetMouseCursor")
  (register get-touch-x (λ [] Int) "GetTouchX")
  (register get-touch-y (λ [] Int) "GetTouchY")
  (register get-touch-position (λ [Int] Vector2) "GetTouchPosition")
  (register get-touch-point-id (λ [Int] Int) "GetTouchPointId")
  (register get-touch-point-count (λ [] Int) "GetTouchPointCount")
  (register is-gesture-detected? (λ [Int] Bool) "IsGestureDetected")
  (register get-gesture-detected (λ [] Int) "GetGestureDetected")
  (register get-gesture-hold-duration (λ [] Float) "GetGestureHoldDuration")
  (register get-gesture-drag-vector (λ [] Vector2) "GetGestureDragVector")
  (register get-gesture-drag-angle (λ [] Float) "GetGestureDragAngle")
  (register get-gesture-pinch-vector (λ [] Vector2) "GetGesturePinchVector")
  (register get-gesture-pinch-angle (λ [] Float) "GetGesturePinchAngle")
  ; (register set-camera-mode (λ [Camera Int] ()) "SetCameraMode")
  ; (register update-camera (λ [(Ptr Camera)] ()) "UpdateCamera")
  (register set-camera-pan-control (λ [Int] ()) "SetCameraPanControl")
  (register set-camera-alt-control (λ [Int] ()) "SetCameraAltControl")
  (register set-camera-smooth-zoom-control (λ [Int] ()) "SetCameraSmoothZoomControl")
  (register set-camera-move-controls (λ [Int Int Int Int Int Int] ()) "SetCameraMoveControls"))

